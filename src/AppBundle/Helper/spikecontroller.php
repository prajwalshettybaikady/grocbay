<?php

namespace AppBundle\Helper;
use ICS\ShopBundle\Entity\ShoppingCart;
use ICS\ShopBundle\Entity\HomeCms;
use Doctrine\ORM\EntityManager;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage;
    
class HelperFunction {

    /**
     *
     * @var EntityManager 
     */
    protected $em;
    protected $session;
    protected $token;
    protected $container;

    public function __construct(TokenStorage $token,EntityManager $entityManager,Session $session,$container)
    {
        $this->em = $entityManager;
        $this->session = $session;
        $this->token = $token;
        $this->container = $container;
    }

    public function testNull($var){
        return ($var==null)?true:false;
    }

    public function testMobile($mobile){
        return !preg_match('/^[0-9]{9}+$/', $mobile);
    }

    public function testOptionalEmail($email){
        if($email==null){
            return false;
        }else{
            return $this->testEmail($email);
        }
    }

    public function testEmail($email){
        return !preg_match('/^[A-z0-9_\-]+[@][A-z0-9_\-]+([.][A-z0-9_\-]+)+[A-z.]{2,4}$/', $email);
    }

    public function authenticateCustomer($apiKey){
        if($apiKey!=null){
            $edit=true;
            $customer = $this->em->createQueryBuilder()
                    ->select('c')
                    ->from('AppBundle:Customer', 'c')
                    ->where('c.apiKey = :apiKey')
                    ->setParameter('apiKey',$apiKey)
                    ->getQuery()
                    ->getResult();
            if($customer!=null){
                $customer=$customer[0];
                $result['data']=[];
                $result['customer']=$customer;
            }else{
                $result['data'][]="User not authenticated";
                return $result;
            }
        }else{
            $result['data'][]="User not authenticated";
            return $result;
        }
        return $result;
    }

    public function sendOtp($mobile,$otp){
         $message="Your OTP is ".$otp.". Please do not share this with anyone.";
      //  $message=$otp;
        $this->sendSms($mobile,$message);
    }
        public function sendOtpSms($mobile,$otp){
        $message="Your OTP is ".$otp.". Please do not share this with anyone.";
        $this->sendSmsOtp($mobile,$message,$otp);
    }
    public function sendOtpCall($mobile,$otp)
    {
        $this->retryWithCall($mobile);
    }
public function ordersms($mobile,$order){
        $msg="You have new order(#".$order->getId().")";
        $this->sendSms($mobile,$message);
}
public function decodeJson($data,$order)
{
$obj=json_decode($data);
foreach ($obj as $res) {
    $message="Thank you ".$res->username." for purchasing with Grocbay. Your order #".$order->getId()." is now procesing";
  $this->sendSms($res->mobileNumber,$message);
}

// sendOrderMessage($mobile);
}    
    public function sendOrderMessage($order){
        $msg="You have new order(#".$order->getId().")";
        // $this->sendSms($mobile,$message);

$subject="You have new order from app $order";
    $contacts = array(
"care@naturebuy.in"
);

foreach($contacts as $contact) {

$to      =  $contact;

$headers = 'From: care@appinsight.tech' . "\r\n" .
       'Reply-To: webmaster@appinsight.tech' . "\r\n" .
        'X-Mailer: PHP/' . phpversion();
mail($to, $subject, $msg, $headers);

}

    }
    public function sendStatus($mobile,$message){
        $this->sendSms($mobile,$message);
    }

// function sms($mobileNumber,$msg)
//     {
// // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/

//     }
public function sendSmsOtp($mobile=null, $message=null,$otp=null){
            // $message=urlencode($message);

           $ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'https://api.twilio.com/2010-04-01/Accounts/ACd3b3e17c79c6e5c3adc486c60ba32b86/Messages.json');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_USERPWD, 'ACd3b3e17c79c6e5c3adc486c60ba32b86' . ':' . '5eeb74a5dc70162569c3b05d5fd3c4dd');
curl_setopt($ch, CURLOPT_POSTFIELDS, 
    http_build_query(array('Body' => $message,'To' => '+971'.$mobile,'From' => '+19492386758')));
$result = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);
    }
    public function sendSms($mobile=null, $message=null){
        if($mobile!=null && $message!=null):
            // $message=urlencode($message);
                     $ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'https://api.twilio.com/2010-04-01/Accounts/ACd3b3e17c79c6e5c3adc486c60ba32b86/Messages.json');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_USERPWD, 'ACd3b3e17c79c6e5c3adc486c60ba32b86' . ':' . '5eeb74a5dc70162569c3b05d5fd3c4dd');
curl_setopt($ch, CURLOPT_POSTFIELDS, 
    http_build_query(array('Body' => $message,'To' => '+971'.$mobile,'From' => '+19492386758')));
$result = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);
        endif;
    }
//    
        public function retryWithCall($mobile=null){
        if($mobile!=null):
            $message=urlencode($message);
       
            $apiRoute="http://sms.chotaweb.com/api/retryotp.php?authkey=246433AcgIcYWo5be18fb9&mobile=91".$mobile."&retrytype=voice";
              // $apiRoute="http://sms.chotaweb.com/api/retryotp.php?authkey=246433AcgIcYWo5be18fb9&mobile=919686741043&retrytype=voice";
            $ch = curl_init();
        curl_setopt($ch,CURLOPT_URL, $apiRoute);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            $response = curl_exec($ch);
        endif;
    }
    function sendGCM($message, $id,$title="Naturebuy") {

        $accessKey='AIzaSyBIVbPQCh9r-e7Tu8g44ty9XK0_CFhXc5A';
        $this->sendToFireBase($accessKey,$message, $id,$title="Naturebuy");
    }

  

    function sendToFireBase($accessKey,$message, $id,$title="Naturebuy") {

    
        $registrationIds = $id;
        #prep the bundle
        $msg = array
          (
            'body'  => $message,
            'title' => $title,
                    'icon'  => 'myicon',/*Default Icon*/
                    'sound' => 'mySound'/*Default sound*/
          );
        $fields = array
                (
                    'to'        => $registrationIds,
                    'notification'  => $msg
                );
    
    
        $headers = array
                (
                    'Authorization: key=' . $accessKey,
                    'Content-Type: application/json'
                );
        #Send Reponse To FireBase Server    
        $ch = curl_init();
        curl_setopt( $ch,CURLOPT_URL, 'https://fcm.googleapis.com/fcm/send' );
        curl_setopt( $ch,CURLOPT_POST, true );
        curl_setopt( $ch,CURLOPT_HTTPHEADER, $headers );
        curl_setopt( $ch,CURLOPT_RETURNTRANSFER, true );
        curl_setopt( $ch,CURLOPT_SSL_VERIFYPEER, false );
        curl_setopt( $ch,CURLOPT_POSTFIELDS, json_encode( $fields ) );
        $result = curl_exec($ch );
        curl_close( $ch );
    }

    public function getMonthlyStats($yearData=null,$status){
        $countings=$this->em->createQueryBuilder()
                            ->select('count(ord.id) as countings')
                            ->from('AppBundle:CustomerOrder', 'ord')
                            ->where('ord.orderStatus = :status')
                            ->andWhere("DATE_FORMAT(ord.orderDate, '%m-%Y') = :yearDate")
                            ->setParameter('yearDate',$yearData)
                            ->setParameter('status',$status)
                            ->getQuery()
                            ->getSingleResult();
        if($countings==[]){
            $countings=0;
        }else{
            $countings=$countings["countings"];
        }

        return $countings;
    }
}

?>
